name: 'Terragrunt'

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'terraform_modules/**'
      - 'terragrunt/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'terraform_modules/**'
      - 'terragrunt/**'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  terragrunt:
    name: 'Terragrunt'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        working-directory: ./terragrunt

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Install Terragrunt
      run: |
        wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v0.45.0/terragrunt_linux_amd64 -O /tmp/terragrunt
        chmod +x /tmp/terragrunt
        sudo mv /tmp/terragrunt /usr/local/bin/terragrunt

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive ..
      continue-on-error: true

    - name: Terragrunt Init
      id: init
      run: terragrunt run-all init
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    - name: Terragrunt Validate
      id: validate
      run: terragrunt run-all validate
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    - name: Terragrunt Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terragrunt run-all plan -out=tfplan
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terragrunt Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terragrunt Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terragrunt Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          ${{ steps.plan.outputs.stdout }}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terragrunt Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terragrunt run-all apply --terragrunt-non-interactive
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        TF_VAR_environment: 'prod'
