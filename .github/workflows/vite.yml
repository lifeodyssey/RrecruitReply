name: 'Vite CI/CD'

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'terraform/**'
      - 'terraform_modules/**'
      - 'terragrunt/**'
      - '**.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'terraform/**'
      - 'terraform_modules/**'
      - 'terragrunt/**'
      - '**.md'
  workflow_dispatch:

env:
  NODE_VERSION: '22.x'
  VITE_APP_ENV: 'test'

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write
  pages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: 'Lint & Type Check'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      id: npm-cache
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        
    - name: Install dependencies
      if: steps.npm-cache.outputs.cache-hit != 'true'
      run: npm ci
      
    - name: ESLint
      run: npm run lint
      
    - name: Type Check
      run: npm run type-check

  test:
    name: 'Test'
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      id: npm-cache
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        
    - name: Install dependencies
      if: steps.npm-cache.outputs.cache-hit != 'true'
      run: npm ci
      
    - name: Run Vitest
      run: npm run test:coverage
      
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: coverage/
        retention-days: 14

  build:
    name: 'Build'
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      id: npm-cache
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        
    - name: Install dependencies
      if: steps.npm-cache.outputs.cache-hit != 'true'
      run: npm ci
      
    - name: Cache Vite build
      uses: actions/cache@v4
      with:
        path: |
          dist
          .vite
        key: ${{ runner.os }}-vite-build-${{ hashFiles('src/**', 'public/**', 'index.html', 'vite.config.ts') }}
        
    - name: Build
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 1

  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Wrangler
      run: npm install -g wrangler@latest
        
    - name: Deploy to Cloudflare Pages
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: recruitreply
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        wranglerVersion: '3.x'
        
    - name: Create deployment summary
      if: success()
      run: |
        echo "# Deployment Successful :rocket:" >> $GITHUB_STEP_SUMMARY
        echo "The application has been successfully deployed to Cloudflare Pages" >> $GITHUB_STEP_SUMMARY
        echo "## Deployment Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Project:** recruitreply" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** production" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Build date:** $(date)" >> $GITHUB_STEP_SUMMARY 