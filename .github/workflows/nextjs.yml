name: 'Next.js CI/CD'

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'terraform/**'
      - 'terraform_modules/**'
      - 'terragrunt/**'
      - '**.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'terraform/**'
      - 'terraform_modules/**'
      - 'terragrunt/**'
      - '**.md'
  workflow_dispatch:
  workflow_run:
    workflows: ["Terragrunt"]
    types:
      - completed
    branches: [main]

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write # Needed for OIDC authentication
  pages: write

jobs:
  build:
    name: 'Build and Test'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for proper versioning
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Security audit
      run: npm audit --production
        
    - name: Lint
      run: npm run lint
      
    - name: Type check
      run: npm run type-check
      
    - name: Download Terraform Outputs
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: terraform.yml
        workflow_conclusion: success
        name: terraform-outputs
        path: .
        if_no_artifact_found: ignore
    
    - name: Load Terraform Outputs as Environment Variables
      id: load_env
      if: github.event_name == 'workflow_run' || github.event_name == 'workflow_dispatch'
      run: |
        if [ -f "tf_outputs.env" ]; then
          echo "Loading Terraform outputs..."
          cat tf_outputs.env >> $GITHUB_ENV
          # Generate .env file for the build
          cat tf_outputs.env > .env.production
          echo "Loaded environment variables from Terraform outputs"
        else
          echo "No terraform outputs found, using default environment values"
        fi
      
    - name: Build
      run: npm run build
      env:
        NEXT_PUBLIC_APP_ENV: production
      
    - name: Test
      run: npm test
      
    - name: Run dependency vulnerability scan
      uses: snyk/actions/node@master
      continue-on-error: true # Don't fail the build, just report issues
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: .next
        retention-days: 1

  deploy:
    name: 'Deploy to Cloudflare Pages'
    needs: build
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_run')
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: build-output
        path: .next
        
    - name: Download Terraform Outputs
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: terraform.yml
        workflow_conclusion: success
        name: terraform-outputs
        path: .
        if_no_artifact_found: ignore
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        
    - name: Install Wrangler
      run: npm install -g wrangler@latest
        
    - name: Update Cloudflare Pages Environment Variables
      if: github.event_name == 'workflow_run' || github.event_name == 'workflow_dispatch'
      run: |
        chmod +x ./scripts/update-cloudflare-vars.js
        ./scripts/update-cloudflare-vars.js
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        PROJECT_NAME: recruitreply
        ENV_FILE_PATH: ./tf_outputs.env
        
    - name: Deploy to Cloudflare Pages
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: recruitreply
        directory: .next
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        wranglerVersion: '3.x' # Use the latest Wrangler version
