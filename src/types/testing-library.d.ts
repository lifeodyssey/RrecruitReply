// Type definitions for @testing-library/react
declare module '@testing-library/react' {
  export const render: <T = HTMLElement>(ui: React.ReactElement, options?: unknown) => { container: HTMLElement; baseElement: HTMLElement; debug: (baseElement?: HTMLElement | DocumentFragment) => void; unmount: () => void; rerender: (ui: React.ReactElement) => void; asFragment: () => DocumentFragment; findByTestId: (id: string) => Promise<T>; getByTestId: (id: string) => T; queryByTestId: (id: string) => T | null; findAllByTestId: (id: string) => Promise<T[]>; getAllByTestId: (id: string) => T[]; queryAllByTestId: (id: string) => T[]; findByText: (text: string | RegExp) => Promise<T>; getByText: (text: string | RegExp) => T; queryByText: (text: string | RegExp) => T | null; findAllByText: (text: string | RegExp) => Promise<T[]>; getAllByText: (text: string | RegExp) => T[]; queryAllByText: (text: string | RegExp) => T[]; };
  export const screen: { getByText: (text: string | RegExp) => HTMLElement; queryByText: (text: string | RegExp) => HTMLElement | null; findByText: (text: string | RegExp) => Promise<HTMLElement>; getAllByText: (text: string | RegExp) => HTMLElement[]; queryAllByText: (text: string | RegExp) => HTMLElement[]; findAllByText: (text: string | RegExp) => Promise<HTMLElement[]>; getByTestId: (id: string) => HTMLElement; queryByTestId: (id: string) => HTMLElement | null; findByTestId: (id: string) => Promise<HTMLElement>; getAllByTestId: (id: string) => HTMLElement[]; queryAllByTestId: (id: string) => HTMLElement[]; findAllByTestId: (id: string) => Promise<HTMLElement[]>; getByRole: (role: string, options?: unknown) => HTMLElement; queryByRole: (role: string, options?: unknown) => HTMLElement | null; findByRole: (role: string, options?: unknown) => Promise<HTMLElement>; getAllByRole: (role: string, options?: unknown) => HTMLElement[]; queryAllByRole: (role: string, options?: unknown) => HTMLElement[]; findAllByRole: (role: string, options?: unknown) => Promise<HTMLElement[]>; getByPlaceholderText: (text: string | RegExp) => HTMLElement; queryByPlaceholderText: (text: string | RegExp) => HTMLElement | null; findByPlaceholderText: (text: string | RegExp) => Promise<HTMLElement>; getAllByPlaceholderText: (text: string | RegExp) => HTMLElement[]; queryAllByPlaceholderText: (text: string | RegExp) => HTMLElement[]; findAllByPlaceholderText: (text: string | RegExp) => Promise<HTMLElement[]>; getByLabelText: (text: string | RegExp) => HTMLElement; queryByLabelText: (text: string | RegExp) => HTMLElement | null; findByLabelText: (text: string | RegExp) => Promise<HTMLElement>; getAllByLabelText: (text: string | RegExp) => HTMLElement[]; queryAllByLabelText: (text: string | RegExp) => HTMLElement[]; findAllByLabelText: (text: string | RegExp) => Promise<HTMLElement[]>; debug: (baseElement?: HTMLElement | DocumentFragment) => void; };
  export const waitFor: <T>(callback: () => T | Promise<T>, options?: { timeout?: number; interval?: number }) => Promise<T>;
  export const fireEvent: { [key: string]: (element: Element, options?: unknown) => boolean; click: (element: Element, options?: unknown) => boolean; change: (element: Element, options?: unknown) => boolean; submit: (element: Element, options?: unknown) => boolean; };
  export const cleanup: () => void;
  export const act: <T>(callback: () => T | Promise<T>) => Promise<void>;
  export const within: (element: HTMLElement) => typeof screen;
  export const renderHook: <Result, Props>(callback: (props: Props) => Result, options?: unknown) => { result: { current: Result }; rerender: (props?: Props) => void; unmount: () => void; };
}
